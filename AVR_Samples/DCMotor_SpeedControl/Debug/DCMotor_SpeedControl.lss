
DCMotor_SpeedControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ee  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000136  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001af  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000078  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b7  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000006a  00000000  00000000  00000867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	26 c0       	rjmp	.+76     	; 0x82 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h>
#include "pwm.h"

int main(void)
{
	init_hardware_pwm1();
  38:	18 d0       	rcall	.+48     	; 0x6a <init_hardware_pwm1>
	DDRB |= 0x01;
  3a:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(0x02);
  3c:	b9 98       	cbi	0x17, 1	; 23
	
	DDRD |= (0x04|0x08);
  3e:	81 b3       	in	r24, 0x11	; 17
  40:	8c 60       	ori	r24, 0x0C	; 12
  42:	81 bb       	out	0x11, r24	; 17
	Explain the concept of pull up	 
	*/
	
    while(1) 
    {
		if ((PINB & 0x02) == 0x02){
  44:	b1 9b       	sbis	0x16, 1	; 22
  46:	07 c0       	rjmp	.+14     	; 0x56 <__SREG__+0x17>
			PORTB |= 0x01;
  48:	c0 9a       	sbi	0x18, 0	; 24
			PORTD |= 0x04;
  4a:	92 9a       	sbi	0x12, 2	; 18
			PORTD &= ~0x08;
  4c:	93 98       	cbi	0x12, 3	; 18
			change_speed_pwm1(500);
  4e:	84 ef       	ldi	r24, 0xF4	; 244
  50:	91 e0       	ldi	r25, 0x01	; 1
  52:	08 d0       	rcall	.+16     	; 0x64 <change_speed_pwm1>
  54:	f7 cf       	rjmp	.-18     	; 0x44 <__SREG__+0x5>
			
		}
		else{
			PORTB &= ~(0x01);
  56:	c0 98       	cbi	0x18, 0	; 24
			PORTD &= ~(0x04);
  58:	92 98       	cbi	0x12, 2	; 18
			PORTD |= 0x08;
  5a:	93 9a       	sbi	0x12, 3	; 18
			change_speed_pwm1(2499);
  5c:	83 ec       	ldi	r24, 0xC3	; 195
  5e:	99 e0       	ldi	r25, 0x09	; 9
  60:	01 d0       	rcall	.+2      	; 0x64 <change_speed_pwm1>
  62:	f0 cf       	rjmp	.-32     	; 0x44 <__SREG__+0x5>

00000064 <change_speed_pwm1>:
    Motor_PWM1 = lower_bound;  
}

void change_speed_pwm1(int speed)
{
  Motor_PWM1 = speed;
  64:	99 bd       	out	0x29, r25	; 41
  66:	88 bd       	out	0x28, r24	; 40
  68:	08 95       	ret

0000006a <init_hardware_pwm1>:

//void 

void init_hardware_pwm1(void)
{
  TCCR1A |= (BIT7|BIT5|BIT1);      // configuration for timer on compare mode for pwm configuration
  6a:	8f b5       	in	r24, 0x2f	; 47
  6c:	82 6a       	ori	r24, 0xA2	; 162
  6e:	8f bd       	out	0x2f, r24	; 47
  TCCR1B |= (BIT4|BIT3|BIT1|BIT0);
  70:	8e b5       	in	r24, 0x2e	; 46
  72:	8b 61       	ori	r24, 0x1B	; 27
  74:	8e bd       	out	0x2e, r24	; 46
  
  
  
  ICR1=2499;                      // selecting pwm period to 20 ms 
  76:	83 ec       	ldi	r24, 0xC3	; 195
  78:	99 e0       	ldi	r25, 0x09	; 9
  7a:	97 bd       	out	0x27, r25	; 39
  7c:	86 bd       	out	0x26, r24	; 38
  
  DDRB|=(BIT2);              // Pwm out to output PORTD4 and PORTD5
  7e:	ba 9a       	sbi	0x17, 2	; 23
  80:	08 95       	ret

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
