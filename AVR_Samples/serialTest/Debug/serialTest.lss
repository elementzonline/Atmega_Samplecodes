
serialTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000039a  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000021e  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000270  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001fd  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ba  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000e67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee eb       	ldi	r30, 0xBE	; 190
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 36       	cpi	r26, 0x6C	; 108
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	2f c0       	rjmp	.+94     	; 0xba <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include "main.h"
#include "uart.h"

int main(void)
{
	init_usart(BAUD_9600);
  5e:	83 e3       	ldi	r24, 0x33	; 51
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	0d d0       	rcall	.+26     	; 0x7e <init_usart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	2f ef       	ldi	r18, 0xFF	; 255
  66:	89 e6       	ldi	r24, 0x69	; 105
  68:	98 e1       	ldi	r25, 0x18	; 24
  6a:	21 50       	subi	r18, 0x01	; 1
  6c:	80 40       	sbci	r24, 0x00	; 0
  6e:	90 40       	sbci	r25, 0x00	; 0
  70:	e1 f7       	brne	.-8      	; 0x6a <main+0xc>
  72:	00 c0       	rjmp	.+0      	; 0x74 <main+0x16>
  74:	00 00       	nop
    while(1)
    {
		_delay_ms(1000);
		print_uart("Hello World");
  76:	80 e6       	ldi	r24, 0x60	; 96
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0d d0       	rcall	.+26     	; 0x96 <print_uart>
  7c:	f3 cf       	rjmp	.-26     	; 0x64 <main+0x6>

0000007e <init_usart>:
    // Communication Parameters: 8 Data, 1 Stop, No Parity   
    // USART Receiver: Off   
    // USART Transmitter: On   
    // USART Mode: Asynchronous   
    // USART Baud rate: baud   
    UCSRA=(0x00);   
  7e:	1b b8       	out	0x0b, r1	; 11
    UCSRB=0x98;   
  80:	28 e9       	ldi	r18, 0x98	; 152
  82:	2a b9       	out	0x0a, r18	; 10
    UCSRC=0x86;   
  84:	26 e8       	ldi	r18, 0x86	; 134
  86:	20 bd       	out	0x20, r18	; 32
    UBRRH=baud>>8;   
  88:	90 bd       	out	0x20, r25	; 32
    UBRRL=baud;  
  8a:	89 b9       	out	0x09, r24	; 9
  8c:	08 95       	ret

0000008e <usart_putchar>:
    //fdevopen(usart_putchar, NULL, 0);   
}
 
void usart_putchar(char data)   
{   
   while(!(UCSRA & BIT5));
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <usart_putchar>
   //Now write the data to USART buffer
   UDR=data;      
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <print_uart>:
  send2uart(buffer);
  usart_putchar(0x0D);
}

void print_uart(char *buffer)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
  int i;
//  for (i=0;i<strlen(buffer);i++)
  for (i=0;buffer[i] != '\0' ;i++)
  9c:	88 81       	ld	r24, Y
  9e:	88 23       	and	r24, r24
  a0:	29 f0       	breq	.+10     	; 0xac <print_uart+0x16>
  a2:	21 96       	adiw	r28, 0x01	; 1
  usart_putchar(buffer[i]);
  a4:	f4 df       	rcall	.-24     	; 0x8e <usart_putchar>

void print_uart(char *buffer)
{
  int i;
//  for (i=0;i<strlen(buffer);i++)
  for (i=0;buffer[i] != '\0' ;i++)
  a6:	89 91       	ld	r24, Y+
  a8:	81 11       	cpse	r24, r1
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <print_uart+0xe>
  usart_putchar(buffer[i]);
  usart_putchar(0x0D);
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	ef df       	rcall	.-34     	; 0x8e <usart_putchar>
  usart_putchar(0x0A);
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	ed df       	rcall	.-38     	; 0x8e <usart_putchar>
  }
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
